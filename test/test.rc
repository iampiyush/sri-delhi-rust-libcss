#[link(name = "test", vers = "1.0", author="Vipul Goel")];
#[crate_type = "lib"];

extern mod std;

use core::io::*;

pub struct log_entry {
	module_name: ~str,
	file_name:~str,
	function_name:~str,
	test_name:~str,
	comment:~str
}

pub struct test_report {
	log_list:~[log_entry],
	file_handle:@Writer,
	is_logged:bool
}

#[unsafe_destructor]
impl Drop for test_report {
    fn finalize(&self) {
    	if (self.is_logged == false) {
    		self.do_forceful_log_dump() ;
    	}
    }
}

impl test_report {
	pub fn pass(&mut self, module_name: ~str, file_name : ~str , function_name : ~str, test_name : ~str) {
		self.do_log(module_name, file_name, function_name, test_name , ~"PASS" );
	}

	pub fn fail(&mut self, module_name: ~str, file_name : ~str , function_name : ~str, test_name : ~str) {
		self.do_log(module_name, file_name, function_name, test_name , ~"FAIL" );
	}

	pub fn info(&mut self, module_name: ~str, file_name : ~str , function_name : ~str, test_name : ~str, comment : ~str ) {
		self.do_log(module_name, file_name, function_name, test_name , comment );
	}

	// collects log in the memory and also print them on the console
	fn do_log(&mut self, module_name: ~str, file_name : ~str , function_name : ~str, test_name : ~str, comment : ~str) {
		io::print(fmt!("\n\t \t [%s]::[%s]::[%s] [%s] %s ",module_name, file_name,function_name, test_name, comment));
		self.do_silent_log(module_name, file_name , test_name, function_name  , comment ) ;
	}

	// Collects log silently in the memory
	fn do_silent_log(&mut self, module_name: ~str, file_name : ~str , function_name : ~str, test_name : ~str, comment : ~str) {
		let a = log_entry {
			module_name:module_name, 
			file_name:file_name , 
			test_name:test_name ,  
			function_name:function_name , 
			comment:comment 
		};
		
		self.log_list.push(a);
	}

	// do log dump in the file
	pub fn do_log_dump(&mut self) {
		self.is_logged = true;
		self.do_forceful_log_dump();
	}

	// do forcefull logging in the end, if user not done file logging during usage
	fn do_forceful_log_dump(&self) {
		self.file_handle.write_line(fmt!("Module,File,Function,Test,Comment"));
		for self.log_list.each() |log_entry| {
			self.file_handle.write_line (
					fmt!("%s,%s,%s,%s,%s",
							log_entry.module_name,
							log_entry.file_name,
							log_entry.function_name,
							log_entry.test_name, 
							log_entry.comment
						)
				);
		}
	}
}

pub fn test_report(logfile : &str) -> Result<~test_report,~str> {
	let flag : &[FileFlag] = &[Append,Create] ;
	if logfile.len()==0 {
		match file_writer(&Path(&"test_log.csv"),flag ) {
			Ok(x)  => Ok(~test_report{log_list:~[] , file_handle:x , is_logged:false}),
			Err(_) => Err(~"Error opening file test_log.csv in open/append modes")
		}
	}
	else {
		match file_writer(&Path(logfile),flag ) {
			Ok(x)  => Ok(~test_report{log_list:~[] , file_handle:x , is_logged:false}),
			Err(_) => Err(~"Error opening custom file in open/append modes")
		}
	}
}

// ~test_report code ends here